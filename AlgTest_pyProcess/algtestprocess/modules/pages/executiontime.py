from typing import List

from dominate import tags
from overrides import overrides

from algtestprocess.modules.components.cardlist import cardlist
from algtestprocess.modules.components.layout import layout
from algtestprocess.modules.components.simpletable import simple_table
from algtestprocess.modules.jcalgtest import (
    ProfilePerformanceFixedJC,
    MeasurementCategory,
    PerformanceResultJC,
)
from algtestprocess.modules.pages.page import Page
from algtestprocess.modules.pages.utils import run_helper


class ExecutionTime(Page):
    TABLE_HEADER = [
        "Name of function",
        "Operation average (ms/op)",
        "Operation minimum (ms/op)",
        "Operation maximum (ms/op)",
        "Data length (bytes)",
        "Prepare average (ms/op)",
        "Prepare minimum (ms/op)",
        "Prepare maximum (ms/op)",
        "Iterations & Invocations",
    ]
    SUBFOLDER_NAME = "run_time"
    FILENAME = "execution-time.html"
    PATH = f"{SUBFOLDER_NAME}/{FILENAME}"

    def __init__(self, profiles):
        self.profiles: List[ProfilePerformanceFixedJC] = profiles

    @staticmethod
    def quick_links():
        tags.h3("Quick links")
        with tags.ul():
            for category in list(MeasurementCategory):
                with tags.li():
                    tags.a(category.value, href="#" + category.name)

    @staticmethod
    def test_details(profile: ProfilePerformanceFixedJC):
        tags.h3("Test details")
        for (key, value) in profile.test_info.items():
            with tags.p(key + ":"):
                tags.strong(value)
            if key == "Card ATR":
                tags.a(
                    "More information parsed from ATR",
                    href="https://smartcard-atr.apdu.fr/parse?ATR="
                         + value.strip(" "),
                )

    def how_it_works(self):
        pass

    @staticmethod
    def cplc_info(profile: ProfilePerformanceFixedJC):
        tags.h3("CPLC info")
        for (key, value) in profile.cplc.items():
            with tags.p(key + ":"):
                tags.strong(value)

    @staticmethod
    def get_info(profile: ProfilePerformanceFixedJC):
        with tags.div(className="row pt-5"):
            tags.h1("Run time results - " + profile.test_info["Card name"])
            tags.p("This file was generated by JCAlgTest tool")
            with tags.div(className="col-md-3 col-xs-3"):
                ExecutionTime.quick_links()
            with tags.div(className="col-md-5 col-xs-5"):
                ExecutionTime.test_details(profile)
            with tags.div(className="col-md-4 col-xs-4"):
                ExecutionTime.cplc_info(profile)

    @staticmethod
    def category_results(
            profile: ProfilePerformanceFixedJC, category: MeasurementCategory
    ) -> List[PerformanceResultJC]:
        return [
            result
            for _, result in profile.results.items()
            if result.category == category
        ]

    @staticmethod
    def get_tables(profile: ProfilePerformanceFixedJC):
        with tags.div(className="row"):
            for category in list(MeasurementCategory):
                tags.h3(category.value, id=category.name)
                data = [
                    [
                        r.name,
                        format(r.operation_avg(), ".2f"),
                        format(r.operation_min(), ".2f"),
                        format(r.operation_max(), ".2f"),
                        r.data_length,
                        r.baseline_min(),
                        r.baseline_max(),
                        r.baseline_avg(),
                        str(r.iterations) + "/" + str(r.invocations),
                    ]
                    if r.status == "OK"
                    else [r.name, r.status]
                    for r in ExecutionTime.category_results(profile, category)
                ]
                simple_table(data, ExecutionTime.TABLE_HEADER, table_cls="p-0")

    def run_single(self, profile: ProfilePerformanceFixedJC):
        doc_title = f"JCAlgTest - {profile.test_info['Card name']} run time"

        def children():
            ExecutionTime.get_info(profile)
            ExecutionTime.get_tables(profile)

        return layout(
            doc_title=doc_title,
            children=children,
            back_to_top=True,
            path_prefix="../"
        )

    @overrides
    def run(self, output_path: str):
        output_path = f"{output_path}/{ExecutionTime.SUBFOLDER_NAME}"
        data = run_helper(output_path, self.profiles, self.run_single)
        with open(f"{output_path}/{ExecutionTime.FILENAME}", "w") as f:
            f.write(
                cardlist(
                    data,
                    "JCAlgTest - Algorithm execution time",
                    ExecutionTime.cardlist_text,
                    ExecutionTime.cardlist_img,
                    None,
                )
            )

    @staticmethod
    def cardlist_text():
        tags.h1("Algorithm execution time")
        tags.p(
            "HTML page is generated from CSV file for each card. "
            "Test details (e.g., date, JCAlgTest version), "
            "JavaCard version, available memory and CPLC information "
            "are located at the beginning."
        )
        p = tags.p()
        p.add("We selected 25 frequently used functions and marked them as")
        p.add(tags.a("TOP FUNCTIONS", href="../top-function.html"))
        p.add(".")
        tags.p(
            "Each row of the table contains the name of measured function, "
            "time of execution (average, minimum, maximum), data length "
            "and minor information such as preparation time (average, "
            "minimum, maximum) and a number of test runs. If there is an "
            "unsupported algorithm or specific value returned by card, "
            "information is written in the row."
        )
        tags.p(
            "Rest of page consists of 20 tables presenting each "
            "group of tested methods."
        )

    @staticmethod
    def cardlist_img():
        tags.img(
            src="../pics/run_time_example.png",
            alt="Run time table example",
            className="img-fluid",
            align="right",
        )
